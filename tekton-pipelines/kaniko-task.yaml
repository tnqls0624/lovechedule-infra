apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko
  namespace: lovechedule
  labels:
    app.kubernetes.io/version: "0.6"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64,linux/arm64,linux/ppc64le"
spec:
  params:
    - name: IMAGE
      description: Name (reference) of the image to build.
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      default: ./Dockerfile # Dockerfile의 경로가 빌드 컨텍스트 내에서 올바른지 확인
    - name: CONTEXT
      description: The build context used by Kaniko.
      default: . # 빌드 컨텍스트 경로
    - name: EXTRA_ARGS
      type: array
      default: []
    - name: BUILDER_IMAGE
      description: The image on which builds will run (default is v1.5.1)
      default: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
  workspaces:
    - name: source
      description: Holds the context and Dockerfile
    - name: dockerconfig
      description: Includes a docker `config.json`
      optional: true
      mountPath: /kaniko/.docker
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: URL of the image just built.
  steps:
    - name: build-and-push
      workingDir: $(workspaces.source.path) # 작업 디렉토리 설정
      image: $(params.BUILDER_IMAGE)
      args:
        - --dockerfile=$(workspaces.source.path)/$(params.DOCKERFILE) # Dockerfile 경로 지정
        - --context=$(workspaces.source.path)/$(params.CONTEXT) # 빌드 컨텍스트 지정
        - --destination=$(params.IMAGE) # 빌드된 이미지가 푸시될 위치
        - --digest-file=$(results.IMAGE_DIGEST.path) # 이미지 다이제스트 파일 저장 경로
      securityContext:
        runAsUser: 0
    - name: write-url
      image: docker.io/library/bash:5.1.4@sha256:c523c636b722339f41b6a431b44588ab2f762c5de5ec3bd7964420ff982fb1d9
      script: |
        set -e
        image="$(params.IMAGE)"
        echo -n "${image}" | tee "$(results.IMAGE_URL.path)"